{"version":3,"sources":["hooks/useHarvest.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","hooks/useApprove.ts","components/Input/Input.tsx","config/index.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/TimeModal.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/Farms.tsx"],"names":["useHarvest","farmPid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onReward","useCallback","address","a","harvest","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useHarvestTime","gettingtimeContract","useGettingtime","useState","time","setTime","useEffect","methods","userInfo","call","res","console","log","concat","nextHarvestUntil","fetchTime","setTimeout","useNowTime","gettingtime","now","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","Wrapper","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","fontSize","defaultProps","useApprove","lpContract","onApprove","approve","tx","useLotteryApprove","cakeContract","useCake","lotteryContract","useLottery","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","TranslateString","useI18n","liquidityUrlPathParts","justifyContent","href","external","NoFeeTag","variant","outline","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","useStake","onStake","amount","stake","info","useUnstake","onUnstake","unstake","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","times","toString","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","refferalAddress","RefferalContext","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestButton","Button","HarvestAction","earnings","rawEarningsBalance","harvestTime","nowTime","style","marginTop","marginBottom","TimeModal","timeString","d","h","Math","floor","m","padStart","secondsToHms","margin","Action","TimeButton","button","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","getContract","onPresentTime","handleApprove","error","textTransform","pr","toNumber","viewBox","fill","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","mediaQueries","sm","xs","Divider","borderColor","ExpandingWrapper","HelpDiv","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","quoteTokenAddresses","display","className","harvestInterval","CardActionsContainer","FarmCards","BaseLayout","md","lg","xl","Farms","farmsProps","path","useRouteMatch","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","stakedOnly","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","MumuPerBlock","poolWeight","pow","comparedTo","Page","exact"],"mappings":"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","file":"static/js/8.0ee1b238.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { harvest, soushHarvest, soushHarvestBnb } from 'utils/callHelpers'\nimport { useGettingtime, useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async (address?:string) => {\n    const txHash = await harvest(masterChefContract, farmPid, account, address)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useHarvestTime = (farmPid: number) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const gettingtimeContract = useGettingtime()\n  const [time,setTime] = useState(0)\n\n  useEffect(() => {\n    const fetchTime = async () => {\n      if(account && time === 0) {\n        const res = await masterChefContract.methods.userInfo(farmPid, account).call()\n        // const now = await gettingtimeContract.methods.gettingtime().call()\n        console.log(\"interval:\".concat(res.nextHarvestUntil))\n        setTime(res.nextHarvestUntil)\n      }\n    }\n    fetchTime()\n    if(time > 0)\n    {\n      setTimeout(()=>{\n        setTime(time-1)\n      },1000)\n    }\n  }, [account,masterChefContract,gettingtimeContract,farmPid,time])\n\n  return time\n}\n\nexport const useNowTime = () => {\n  const { account } = useWallet()\n  const gettingtimeContract = useGettingtime()\n  const [time,setTime] = useState(0)\n\n  useEffect(() => {\n    const fetchTime = async () => {\n      if(account && time === 0) {\n        const now = await gettingtimeContract.methods.gettingtime().call()\n        console.log(\"now:\".concat(now))\n        setTime(now)\n      }\n    }\n    fetchTime()\n  }, [account,gettingtimeContract,time])\n\n  return time\n}\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold fontSize=\"20px\">\n        {expanded ? 'Hide' : 'Details'}\n        {expanded ? <ChevronUpIcon color=\"primary\" /> : <ChevronDownIcon color=\"primary\" />}\n      </Text>\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserAllowance } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useCake, useLottery, useMasterchef, useSousChef } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Flex, Link, LinkExternal, Text } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={\n          isTokenOnly ?\n            `https://dex.mumuswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n            :\n          `https://dex.mumuswap.finance/#/add/${liquidityUrlPathParts}`\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated === \"$NaN\"?\"$0\":totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"center\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { BinanceIcon, CommunityIcon, Tag, VerifiedIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Image, Tag } from '@pancakeswap-libs/uikit'\nimport { NoFeeTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"primary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserStakedBalance } from 'state/actions'\nimport { sousStake, sousStakeBnb, stake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, address?: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account, address)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string,address?: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account, address)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from 'state/actions'\nimport { sousEmegencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useContext, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport Spacer from '../../../components/Spacer'\nimport { RefferalContext } from '../../../contexts/RefferalContext'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string,address: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const { refferalAddress } = useContext(RefferalContext)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <Spacer size=\"sm\"/>\n      <ModalActions>\n        <Button variant=\"primary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || val === ''}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val,(refferalAddress===\"\"?account:refferalAddress))\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { AddIcon, Button, Flex, Heading, IconButton, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"primary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"text\" />\n        </IconButton>\n        <IconButton variant=\"primary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"text\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'text' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useContext, useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest, useHarvestTime, useNowTime } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useStake from '../../../../hooks/useStake'\nimport { RefferalContext } from '../../../../contexts/RefferalContext'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestButton = styled(Button)`\n  box-shadow: none !important;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { account } = useWallet()\n  const { refferalAddress } = useContext(RefferalContext)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  const harvestTime = useHarvestTime(pid)\n  const nowTime = useNowTime()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\" style={{marginTop: \"-5px\"}}>\n      <Heading color={rawEarningsBalance === 0 ? 'text' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 10 ?\n          <HarvestButton\n            disabled={rawEarningsBalance === 0 || pendingTx || harvestTime-nowTime > 0}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString(),(refferalAddress===\"\"?account:refferalAddress))\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </HarvestButton>\n          : null}\n        <HarvestButton\n          disabled={rawEarningsBalance === 0 || pendingTx || harvestTime-nowTime > 0}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward((refferalAddress===\"\"?account:refferalAddress))\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </HarvestButton>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { Button, Modal,Text } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport Spacer from '../../../components/Spacer'\r\nimport { useHarvestTime, useNowTime } from '../../../hooks/useHarvest'\r\n\r\ninterface TimeModalProps {\r\n  pid: number\r\n  onDismiss?: () => void\r\n}\r\nconst secondsToHms = (d)=>{\r\n  const h = Math.floor(d / 3600);\r\n  const m = Math.floor(d % 3600 / 60);\r\n  const s = Math.floor(d % 3600 % 60);\r\n\r\n  const hDisplay = (h<10?h.toString().padStart(2,\"0\"):h.toString()).concat(\":\");\r\n  const mDisplay = (m<10?m.toString().padStart(2,\"0\"):m.toString()).concat(\":\");\r\n  const sDisplay = (s<10?s.toString().padStart(2,\"0\"):s.toString());\r\n  return hDisplay + mDisplay + sDisplay;\r\n}\r\nconst TimeModal: React.FC<TimeModalProps> = ({ pid, onDismiss}) => {\r\n  const harvestTime = useHarvestTime(pid)\r\n  const nowTime = useNowTime()\r\n  const timeString = secondsToHms(harvestTime-nowTime)\r\n  return (\r\n    <Modal title=\"Harvest In\" onDismiss={onDismiss}>\r\n      <Text fontSize=\"32px\" bold color=\"primary\" style={{margin: \"0 auto\"}}> { timeString }</Text>\r\n      <Spacer size=\"sm\"/>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TimeModal\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Heading, Text, useModal } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport TimeModal from '../TimeModal'\nimport { useHarvestTime, useNowTime } from '../../../../hooks/useHarvest'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\nconst TimeButton = styled.button`\n  background: transparent;\n  padding: 0;\n  border: none !important;\n  outline: none !important;\n  cursor: pointer;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const harvestTime = useHarvestTime(pid)\n  const nowTime = useNowTime()\n\n  const [onPresentTime] = useModal(<TimeModal pid={farm.pid}/>)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex justifyContent=\"space-between\" mb=\"10px\">\n        <Flex>\n          <Text bold textTransform=\"uppercase\" color=\"text\" fontSize=\"12px\" pr=\"3px\">\n            {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n            Mumu\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\">\n            {TranslateString(999, 'Earned')}\n          </Text>\n        </Flex>\n        {\n          (stakedBalance.toNumber() > 0 && harvestTime-nowTime >=0 ) &&\n          (\n            <TimeButton onClick={onPresentTime}>\n              <svg viewBox=\"0 0 24 24\" fill=\"orange\" width=\"20px\">\n                <path d=\"M12,20A7,7 0 0,1 5,13A7,7 0 0,1 12,6A7,7 0 0,1 19,13A7,7 0 0,1 12,20M12,4A9,9 0 0,0 3,13A9,9 0 0,0 12,22A9,9 0 0,0 21,13A9,9 0 0,0 12,4M12.5,8H11V14L15.75,16.85L16.5,15.62L12.5,13.25V8M7.88,3.39L6.6,1.86L2,5.71L3.29,7.24L7.88,3.39M22,5.72L17.4,1.86L16.11,3.39L20.71,7.25L22,5.72Z\"> </path>\n              </svg>\n            </TimeButton>\n          )\n        }\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"text\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Flex, LinkExternal, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { apyModalRoi, calculateCakeEarnedPerThousandDollars } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'DEQU per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://dex.mumuswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, HelpIcon, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 0px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;  \n  background: ${({ theme }) => theme.colors.card};\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 8% 10%;\n  position: relative;\n  text-align: center;\n  ${({ theme }) => theme.mediaQueries.sm}{\n    background-size: 100% 485px;\n  }\n  ${({ theme }) => theme.mediaQueries.xs} {\n    background-size: 100% 510px;\n  }\n`\nconst BottomBar = ()=>{\n  return (<img alt=\"bottom\" style={{width: \"100%\",position: \"absolute\",left: \"0\",bottom: \"-12px\"}} src='/images/cardbackbottom_farm.png'/>);\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\nconst HelpDiv = styled.div`\n  display: inline-block;\n  position: relative;\n  & > a {\n    position: relative;\n    top: 4px;\n    left: 4px;\n  }\n  & > .tooltip{\n    display: none;\n    background: rgba(0,0,0,0.8);\n    position: absolute;\n    width: 160px;\n    left: 135%;\n    padding: 10px;\n    border-radius: 10px;\n    top: -35px;\n  }\n  &:hover > .tooltip{\n    display: block;\n  }\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'Mumu'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAddresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'EGG' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      \n\n    {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text bold fontSize=\"20px\">{TranslateString(352, 'APY')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }} fontSize=\"20px\">\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAddresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '15px' }}>\n          Harvest Lockup\n          <HelpDiv>\n            <a href=\"https://docs.mumuswap.finance\">\n              <HelpIcon color=\"primary\" style={{width: \"15px\"}}/>\n            </a>\n            <span className=\"tooltip\">\n              <Text color=\"primary\">How soon you harvest or compound again</Text>\n            </span>\n          </HelpDiv>\n          </Text>\n        <Text bold style={{ fontSize: '15px' }}>{(farm.harvestInterval / 3600)}hours</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAddresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React, { useCallback, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst FarmCards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n  max-width: 1140px;\n  margin: 0 auto;\n\n  & > div {\n    grid-column: span 8;\n    width: 100%;\n    margin: 0 auto;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    & > div {\n      grid-column: span 12;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: 2/span 10;\n    }\n  }\n  ${({ theme }) => theme.mediaQueries.md} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.MumuPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <div style={{marginTop: \"30px\"}}>\n        <FarmCards>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FarmCards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}